Q. 6. Write a Python program that simulates a brute-force attack on a password by trying out all possible character combinations. 

import itertools
import string

def bruteforce_attack(password):
    chars = string.printable.strip()
    attempts = 0
    for length in range(1, len(password) + 1):
        for guess in itertools.product(chars, repeat=length):
            attempts += 1
            guess = ''.join(guess)
            if guess == password:
                return (attempts, guess)
    return (attempts, None)

password = input("Input the password to crack: ")
attempts, guess = bruteforce_attack(password)
if guess:
    print(f"Password cracked in {attempts} attempts. The password is {guess}.")
else:
    print(f"Password not cracked after {attempts} attempts.")



EXPLANATION
1.	PASSWORD LENGTH:

o	Brute-forcing longer passwords is exponentially harder:

	A charset of 62 (letters + digits) and a password of length 6 requires 626=56,800,235,58462^6 = 56,800,235,584626=56,800,235,584 attempts.

2.	WHY IT'S SLOW:
o	Brute-force attacks are inherently inefficient, especially for strong passwords.

o	Adding complexity (e.g., longer lengths, more characters) drastically increases the time required.

3.	REAL-WORLD APPLICATIONS:
o	Demonstrating the vulnerability of weak or short passwords.

o	Stressing the importance of using strong passwords.
________________________________________
SECURITY NOTE
•	This program is for educational purposes only. Attempting unauthorized brute-force attacks is illegal and unethical.

•	Always use this in controlled environments with your own data.
